<?xml version="1.0" encoding="UTF-8"?>
<web-app
        xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
        version="3.0"
        metadata-complete="false">

    <display-name>peigubao</display-name>

    <!-- Spring配置文件开始  -->
     <context-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>
             classpath:applicationContext-main.xml
         </param-value>
     </context-param>
     <context-param>
         <!-- 页面静态化刷新时间 -->
         <param-name>statusPageRefreshTime</param-name>
         <!-- 单位分钟 -->
         <param-value>600</param-value>
     </context-param>
     <listener>
         <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
     </listener>
     <!-- Spring配置文件结束 -->

    <!-- 可以使用RequestContextHolder.currentRequestAttributes() 获取到请求的attr -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    <!-- 页面静态化监听器 -->
    <!--listener>
        <listener-class>com.tzdr.web.utils.PageStatusListener</listener-class>
    </listener-->
    
       <!-- 在线人数 -->
     <listener>
        <listener-class>com.tzdr.web.controller.homepage.OnlineListener</listener-class>
    </listener>
    <!-- 设置servlet编码开始 -->
  
    <filter>
        <filter-name>Set Character Encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
   
    <filter-mapping>
        <filter-name>Set Character Encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    
    <!-- ========================单点登录开始 ======================== -->
	<!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置 -->
	<listener>
		<listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
	</listener>
	<!-- 该过滤器用于实现单点登出功能，可选配置。 -->
	<filter>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
		<init-param>
			<param-name>casServerUrlPrefix</param-name>
			<param-value>http://testlogin.peigubao.com:8082/pgb-cas/</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 该过滤器用于实现单点登录功能 -->
	<filter>
		<filter-name>CAS Filter</filter-name>
		<filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>
		<init-param>
			<param-name>casServerLoginUrl</param-name>
			<param-value>http://testlogin.peigubao.com:8082/pgb-cas/login</param-value>
			<!-- 使用的CAS-Server的登录地址,一定是到登录的action -->
		</init-param>
		<init-param>
			<param-name>serverName</param-name>
			<param-value>http://testweb.peigubao.com:89</param-value>
			<!-- 当前Client系统的地址 -->
		</init-param>
		<init-param>  
            <param-name>ignorePattern</param-name>  
            <param-value>/user/convert$</param-value>  
        </init-param>
	</filter>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/totrade</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/user/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/message/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/userinfo/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/generalize/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/pay/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/draw/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/fund/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/securityInfo/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/trade/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/userftse/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/uhkstock/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/userhkstock/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/userhsi/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/usercrudeoil/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/userproduct/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/uservolume/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/future/pay</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/future/day_pay</url-pattern>
	</filter-mapping>	
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/signinsucess</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/hsiSpread/success</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/future/trade_list</url-pattern>
	</filter-mapping>
	
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>*.sso</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toDaySSO</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toMonthSSO</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toFutureIndexSSO</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toFtseIndexSSO</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toHSIIndexSSO</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toCrudeOilIndexSSO</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toFutureDayIndexSSO</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toProductGoldIndexSSO</url-pattern>
	</filter-mapping>
		<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toProductSliverIndexSSO</url-pattern>
	</filter-mapping>
		<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toProductCopperIndexSSO</url-pattern>
	</filter-mapping>
		<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toProductRubberIndexSSO</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/indexSSO</url-pattern>
	</filter-mapping>
		<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toHkStockSSO</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/spot/booking</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/ftseActive/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/crudeActive/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toIfredEnvelopSSO</url-pattern>
	</filter-mapping>
		<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/toshoutOrderPKSSO</url-pattern>
	</filter-mapping>
	<!-- 该过滤器负责对Ticket的校验工作 -->
	<filter>
		<filter-name>CAS Validation Filter</filter-name>
		<filter-class>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</filter-class>
		<init-param>
			<param-name>casServerUrlPrefix</param-name>
			<param-value>http://testlogin.peigubao.com:8082/pgb-cas/</param-value>
			<!-- 使用的CAS-Server的地址,一定是在浏览器输入该地址能正常打开CAS-Server的根地址 -->
		</init-param>
		<init-param>
			<param-name>serverName</param-name>
			<param-value>http://testweb.peigubao.com:89</param-value>
			<!-- 当前Client系统的地址 -->
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CAS Validation Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	

	<!-- 该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->
	<filter>
		<filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
		<filter-class>org.jasig.cas.client.util.HttpServletRequestWrapperFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--
		该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。
		 比如AssertionHolder.getAssertion().getPrincipal().getName()
		 或者request.getUserPrincipal().getName()
	-->
	<filter>
		<filter-name>CAS Assertion Thread Local Filter</filter-name>
		<filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS Assertion Thread Local Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 自定义本项目不需要cas拦截，但跨项目时需要cas拦截的url -->
	<filter>
		<filter-name>UrlConvertFilter</filter-name>
		<filter-class>com.tzdr.web.support.filter.cas.UrlConvertFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>UrlConvertFilter</filter-name>
		<url-pattern>*.sso</url-pattern>
	</filter-mapping>
		
	<!-- 自定义的客户端身份验证过滤器(该过滤器和cas无关,是当前系统内部的身份验证)begin -->
	<filter>
		<filter-name>Authentication</filter-name>
		<filter-class>com.tzdr.web.support.filter.AuthenticationFilter</filter-class>
		<init-param>
			<param-name>excludePattern</param-name>
			<param-value>.*/findLinks|.*/notice/item|.*/signin|.*/validate.code|.*/send_mobile_code|.*/static/.*|.*/forgetpw|.*/login|.*/generalizesignin</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>Authentication</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- ========================单点登录结束 ======================== -->
   
    <!-- 设置servlet编码结束 -->
      <!-- 设置safe开始 -->
    <filter>
        <filter-name>safeFilter</filter-name>
        <filter-class>com.tzdr.web.support.filter.SafeFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>safeFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <filter>   
 	  <filter-name>xssFilter</filter-name>   
 	  <filter-class>com.tzdr.web.support.filter.XssFilters</filter-class>
 	</filter> 
   <filter-mapping>   
 	       <filter-name>xssFilter</filter-name>   
 	         <servlet-name>/*</servlet-name>
 	</filter-mapping> 
 
    <servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

	<!-- open session -->
    <filter>  
            <filter-name>Spring OpenEntityManagerInViewFilter</filter-name>  
            <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>  
            <init-param>  
            <!-- 指定org.springframework.orm.jpa.LocalEntityManagerFactoryBean在spring配置文件中的名称,默认值为entityManagerFactory  
            如果LocalEntityManagerFactoryBean在spring中的名称不是entityManagerFactory,该参数一定要指定,否则会出现找不到entityManagerFactory的例外 -->  
                <param-name>entityManagerFactoryBeanName</param-name>  
                <param-value>entityManagerFactory</param-value>  
            </init-param>   
   </filter>  
   <filter-mapping>  
            <filter-name>Spring OpenEntityManagerInViewFilter</filter-name>  
            <url-pattern>/*</url-pattern>  
   </filter-mapping>  
   	
   	 
 	
  

 	
   	
	<servlet>  
	    <servlet-name>Kaptcha</servlet-name>  
	    <servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>  
	    <init-param>  
	        <param-name>kaptcha.border</param-name>  
	        <param-value>yes</param-value>  
	    </init-param>  
	    <init-param>       
	        <param-name>kaptcha.textproducer.char.string</param-name>       
	        <param-value>0123456789</param-value>       
	    </init-param>  
	</servlet>  
	<servlet-mapping>  
	    <servlet-name>Kaptcha</servlet-name>  
	    <url-pattern>*.code</url-pattern>  
	</servlet-mapping> 
                
    <!-- 远程获取图片 -->             
    <servlet>
		<servlet-name>RemoteContentServlet</servlet-name>
		<servlet-class>com.tzdr.common.web.RemoteContentServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>RemoteContentServlet</servlet-name>
		<url-pattern>/getRemoteContent</url-pattern>
	</servlet-mapping>
    <!-- 错误页面映射 -->
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/404.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/jsp/error/error.jsp</location>
    </error-page>
    <error-page>
        <error-code>503</error-code>
        <location>/WEB-INF/jsp/error/error.jsp</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/WEB-INF/jsp/error/error.jsp</location>
    </error-page>

    <!--如果 发现报 该错误 No mapping found for HTTP request with URI  加入下mapping
    <servlet-mapping>
        <servlet-name>jsp</servlet-name>
        <url-pattern>*.jsp</url-pattern>
    </servlet-mapping-->

</web-app>
